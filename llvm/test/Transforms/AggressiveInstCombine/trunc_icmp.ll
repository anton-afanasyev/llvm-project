; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -aggressive-instcombine -S | FileCheck %s

; https://alive2.llvm.org/ce/z/dMeKfx
define i16 @icmp_is_used_and_uses(i8 %in) {
; CHECK-LABEL: @icmp_is_used_and_uses(
; CHECK-NEXT:    [[T5:%.*]] = zext i8 [[IN:%.*]] to i16
; CHECK-NEXT:    [[T6:%.*]] = mul i16 [[T5]], 3
; CHECK-NEXT:    [[T7:%.*]] = icmp ult i16 [[T6]], 255
; CHECK-NEXT:    [[T8:%.*]] = select i1 [[T7]], i16 [[T6]], i16 255
; CHECK-NEXT:    ret i16 [[T8]]
;
  %t5 = zext i8 %in to i32
  %t6 = mul nuw nsw i32 %t5, 3
  %t7 = icmp ult i32 %t6, 255
  %t8 = select i1 %t7, i32 %t6, i32 255
  %t9 = trunc i32 %t8 to i16
  ret i16 %t9
}

define i16 @icmp_is_used_only(i8 %in, i32 %in2) {
; CHECK-LABEL: @icmp_is_used_only(
; CHECK-NEXT:    [[T5:%.*]] = zext i8 [[IN:%.*]] to i32
; CHECK-NEXT:    [[T6:%.*]] = mul nuw nsw i32 [[T5]], 3
; CHECK-NEXT:    [[T7:%.*]] = icmp ult i32 [[IN2:%.*]], 255
; CHECK-NEXT:    [[T8:%.*]] = select i1 [[T7]], i32 [[T6]], i32 255
; CHECK-NEXT:    [[T9:%.*]] = trunc i32 [[T8]] to i16
; CHECK-NEXT:    ret i16 [[T9]]
;
  %t5 = zext i8 %in to i32
  %t6 = mul nuw nsw i32 %t5, 3
  %t7 = icmp ult i32 %in2, 255
  %t8 = select i1 %t7, i32 %t6, i32 255
  %t9 = trunc i32 %t8 to i16
  ret i16 %t9
}

define i16 @icmp_is_used_only_and_zexted(i8 %in, i8 %in2) {
; CHECK-LABEL: @icmp_is_used_only_and_zexted(
; CHECK-NEXT:    [[T5:%.*]] = zext i8 [[IN:%.*]] to i16
; CHECK-NEXT:    [[T6:%.*]] = mul i16 [[T5]], 3
; CHECK-NEXT:    [[IN22:%.*]] = zext i8 [[IN2:%.*]] to i16
; CHECK-NEXT:    [[T7:%.*]] = icmp ult i16 [[IN22]], 255
; CHECK-NEXT:    [[T8:%.*]] = select i1 [[T7]], i16 [[T6]], i16 255
; CHECK-NEXT:    ret i16 [[T8]]
;
  %t5 = zext i8 %in to i32
  %t6 = mul nuw nsw i32 %t5, 3
  %in22 = zext i8 %in2 to i32
  %t7 = icmp ult i32 %in22, 255
  %t8 = select i1 %t7, i32 %t6, i32 255
  %t9 = trunc i32 %t8 to i16
  ret i16 %t9
}

define i16 @icmp_is_used_and_uses_zext(i8 %in) {
; CHECK-LABEL: @icmp_is_used_and_uses_zext(
; CHECK-NEXT:    [[T5:%.*]] = zext i8 [[IN:%.*]] to i16
; CHECK-NEXT:    [[T6:%.*]] = mul i16 [[T5]], 3
; CHECK-NEXT:    [[T7:%.*]] = icmp ult i16 [[T5]], 255
; CHECK-NEXT:    [[T8:%.*]] = select i1 [[T7]], i16 [[T6]], i16 255
; CHECK-NEXT:    ret i16 [[T8]]
;
  %t5 = zext i8 %in to i32
  %t6 = mul nuw nsw i32 %t5, 3
  %t7 = icmp ult i32 %t5, 255
  %t8 = select i1 %t7, i32 %t6, i32 255
  %t9 = trunc i32 %t8 to i16
  ret i16 %t9
}

define i16 @select_uses_not_icmp(i8 %in, i1 %in2) {
; CHECK-LABEL: @select_uses_not_icmp(
; CHECK-NEXT:    [[T5:%.*]] = zext i8 [[IN:%.*]] to i16
; CHECK-NEXT:    [[T6:%.*]] = mul i16 [[T5]], 3
; CHECK-NEXT:    [[T8:%.*]] = select i1 [[IN2:%.*]], i16 [[T6]], i16 255
; CHECK-NEXT:    ret i16 [[T8]]
;
  %t5 = zext i8 %in to i32
  %t6 = mul nuw nsw i32 %t5, 3
  %t8 = select i1 %in2, i32 %t6, i32 255
  %t9 = trunc i32 %t8 to i16
  ret i16 %t9
}
