; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -aggressive-instcombine -S | FileCheck %s

define i16 @lshr_trunc_commute(i16 %x) {
; CHECK-LABEL: @lshr_trunc_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[LSHR:%.*]] = lshr i32 [[ZEXT]], 15
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[LSHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %lshr = lshr i32 %zext, 15
  %trunc = trunc i32 %lshr to i16
  ret i16 %trunc
}

define i16 @lshr_trunc_not_commute(i16 %x) {
; CHECK-LABEL: @lshr_trunc_not_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[LSHR:%.*]] = lshr i32 [[ZEXT]], 16
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[LSHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %lshr = lshr i32 %zext, 16
  %trunc = trunc i32 %lshr to i16
  ret i16 %trunc
}

define i16 @ashr_trunc_not_commute(i16 %x) {
; CHECK-LABEL: @ashr_trunc_not_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[ASHR:%.*]] = ashr i32 [[ZEXT]], 15
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[ASHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %ashr = ashr i32 %zext, 15
  %trunc = trunc i32 %ashr to i16
  ret i16 %trunc
}

define i16 @ashr_trunc_commute(i16 %x) {
; CHECK-LABEL: @ashr_trunc_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[AND:%.*]] = and i32 [[ZEXT]], 32767
; CHECK-NEXT:    [[ASHR:%.*]] = ashr i32 [[AND]], 15
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[ASHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %and = and i32 %zext, 32767
  %ashr = ashr i32 %and, 15
  %trunc = trunc i32 %ashr to i16
  ret i16 %trunc
}

define i16 @var_shift_not_commute(i8 %x, i8 %amt) {
; CHECK-LABEL: @var_shift_not_commute(
; CHECK-NEXT:    [[Z:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[ZA:%.*]] = zext i8 [[AMT:%.*]] to i32
; CHECK-NEXT:    [[S:%.*]] = lshr i32 [[Z]], [[ZA]]
; CHECK-NEXT:    [[A:%.*]] = add i32 [[S]], [[Z]]
; CHECK-NEXT:    [[S2:%.*]] = lshr i32 [[A]], 2
; CHECK-NEXT:    [[T:%.*]] = trunc i32 [[S2]] to i16
; CHECK-NEXT:    ret i16 [[T]]
;
  %z = zext i8 %x to i32
  %za = zext i8 %amt to i32
  %s = lshr i32 %z, %za
  %a = add i32 %s, %z
  %s2 = lshr i32 %a, 2
  %t = trunc i32 %s2 to i16
  ret i16 %t
}

define i16 @var_shift_commute(i8 %x, i8 %amt) {
; CHECK-LABEL: @var_shift_commute(
; CHECK-NEXT:    [[Z:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[ZA:%.*]] = zext i8 [[AMT:%.*]] to i32
; CHECK-NEXT:    [[ZA2:%.*]] = and i32 [[ZA]], 15
; CHECK-NEXT:    [[S:%.*]] = lshr i32 [[Z]], [[ZA2]]
; CHECK-NEXT:    [[A:%.*]] = add i32 [[S]], [[Z]]
; CHECK-NEXT:    [[S2:%.*]] = lshr i32 [[A]], 2
; CHECK-NEXT:    [[T:%.*]] = trunc i32 [[S2]] to i16
; CHECK-NEXT:    ret i16 [[T]]
;
  %z = zext i8 %x to i32
  %za = zext i8 %amt to i32
  %za2 = and i32 %za, 15
  %s = lshr i32 %z, %za2
  %a = add i32 %s, %z
  %s2 = lshr i32 %a, 2
  %t = trunc i32 %s2 to i16
  ret i16 %t
}

define void @big_dag(i16* %a, i8 %b, i8 %c) {
; CHECK-LABEL: @big_dag(
; CHECK-NEXT:    [[ZEXT1:%.*]] = zext i8 [[B:%.*]] to i32
; CHECK-NEXT:    [[ZEXT2:%.*]] = zext i8 [[C:%.*]] to i32
; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[ZEXT1]], [[ZEXT2]]
; CHECK-NEXT:    [[SFT1:%.*]] = and i32 [[ADD1]], 15
; CHECK-NEXT:    [[SHR1:%.*]] = lshr i32 [[ADD1]], [[SFT1]]
; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[ADD1]], [[SHR1]]
; CHECK-NEXT:    [[SFT2:%.*]] = and i32 [[ADD2]], 7
; CHECK-NEXT:    [[SHR2:%.*]] = lshr i32 [[ADD2]], [[SFT2]]
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[SHR2]] to i16
; CHECK-NEXT:    store i16 [[TRUNC]], i16* [[A:%.*]], align 2
; CHECK-NEXT:    ret void
;
  %zext1 = zext i8 %b to i32
  %zext2 = zext i8 %c to i32
  %add1 = add i32 %zext1, %zext2
  %sft1 = and i32 %add1, 15
  %shr1 = lshr i32 %add1, %sft1
  %add2 = add i32 %add1, %shr1
  %sft2 = and i32 %add2, 7
  %shr2 = lshr i32 %add2, %sft2
  %trunc = trunc i32 %shr2 to i16
  store i16 %trunc, i16* %a, align 2
  ret void
}

define <2 x i16> @vector_commute(<2 x i8> %x) {
; CHECK-LABEL: @vector_commute(
; CHECK-NEXT:    [[Z:%.*]] = zext <2 x i8> [[X:%.*]] to <2 x i32>
; CHECK-NEXT:    [[ZA:%.*]] = and <2 x i32> [[Z]], <i32 7, i32 8>
; CHECK-NEXT:    [[S:%.*]] = lshr <2 x i32> [[Z]], [[ZA]]
; CHECK-NEXT:    [[A:%.*]] = add <2 x i32> [[S]], [[Z]]
; CHECK-NEXT:    [[S2:%.*]] = lshr <2 x i32> [[A]], <i32 4, i32 5>
; CHECK-NEXT:    [[T:%.*]] = trunc <2 x i32> [[S2]] to <2 x i16>
; CHECK-NEXT:    ret <2 x i16> [[T]]
;
  %z = zext <2 x i8> %x to <2 x i32>
  %za = and <2 x i32> %z, <i32 7, i32 8>
  %s = lshr <2 x i32> %z, %za
  %a = add <2 x i32> %s, %z
  %s2 = lshr <2 x i32> %a, <i32 4, i32 5>
  %t = trunc <2 x i32> %s2 to <2 x i16>
  ret <2 x i16> %t
}

define <2 x i8> @vector_commute_but_no_new_vector_type(<2 x i8> %x) {
; CHECK-LABEL: @vector_commute_but_no_new_vector_type(
; CHECK-NEXT:    [[Z:%.*]] = zext <2 x i8> [[X:%.*]] to <2 x i32>
; CHECK-NEXT:    [[ZA:%.*]] = and <2 x i32> [[Z]], <i32 7, i32 8>
; CHECK-NEXT:    [[S:%.*]] = lshr <2 x i32> [[Z]], [[ZA]]
; CHECK-NEXT:    [[A:%.*]] = add <2 x i32> [[S]], [[Z]]
; CHECK-NEXT:    [[S2:%.*]] = lshr <2 x i32> [[A]], <i32 4, i32 5>
; CHECK-NEXT:    [[T:%.*]] = trunc <2 x i32> [[S2]] to <2 x i8>
; CHECK-NEXT:    ret <2 x i8> [[T]]
;
  %z = zext <2 x i8> %x to <2 x i32>
  %za = and <2 x i32> %z, <i32 7, i32 8>
  %s = lshr <2 x i32> %z, %za
  %a = add <2 x i32> %s, %z
  %s2 = lshr <2 x i32> %a, <i32 4, i32 5>
  %t = trunc <2 x i32> %s2 to <2 x i8>
  ret <2 x i8> %t
}

define <2 x i16> @vector_not_commute(<2 x i8> %x) {
; CHECK-LABEL: @vector_not_commute(
; CHECK-NEXT:    [[Z:%.*]] = zext <2 x i8> [[X:%.*]] to <2 x i32>
; CHECK-NEXT:    [[ZA:%.*]] = and <2 x i32> [[Z]], <i32 7, i32 8>
; CHECK-NEXT:    [[S:%.*]] = lshr <2 x i32> [[Z]], [[ZA]]
; CHECK-NEXT:    [[A:%.*]] = add <2 x i32> [[S]], [[Z]]
; CHECK-NEXT:    [[S2:%.*]] = lshr <2 x i32> [[A]], <i32 16, i32 5>
; CHECK-NEXT:    [[T:%.*]] = trunc <2 x i32> [[S2]] to <2 x i16>
; CHECK-NEXT:    ret <2 x i16> [[T]]
;
  %z = zext <2 x i8> %x to <2 x i32>
  %za = and <2 x i32> %z, <i32 7, i32 8>
  %s = lshr <2 x i32> %z, %za
  %a = add <2 x i32> %s, %z
  %s2 = lshr <2 x i32> %a, <i32 16, i32 5>
  %t = trunc <2 x i32> %s2 to <2 x i16>
  ret <2 x i16> %t
}

define i16 @shl_not_commute(i8 %x) {
; CHECK-LABEL: @shl_not_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[SHL]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i8 %x to i32
  %shl = shl i32 %zext, %zext
  %trunc = trunc i32 %shl to i16
  ret i16 %trunc
}

define i16 @shl_commute(i8 %x) {
; CHECK-LABEL: @shl_commute(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[SHL:%.*]] = shl i32 [[ZEXT]], [[AND]]
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[SHL]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i8 %x to i32
  %and = and i32 %zext, 15
  %shl = shl i32 %zext, %and
  %trunc = trunc i32 %shl to i16
  ret i16 %trunc
}

define i16 @lshr_exact(i16 %x) {
; CHECK-LABEL: @lshr_exact(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[LSHR:%.*]] = lshr exact i32 [[ZEXT]], 15
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[LSHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %lshr = lshr exact i32 %zext, 15
  %trunc = trunc i32 %lshr to i16
  ret i16 %trunc
}

define i16 @ashr_exact(i16 %x) {
; CHECK-LABEL: @ashr_exact(
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[AND:%.*]] = and i32 [[ZEXT]], 32767
; CHECK-NEXT:    [[ASHR:%.*]] = ashr exact i32 [[AND]], 15
; CHECK-NEXT:    [[TRUNC:%.*]] = trunc i32 [[ASHR]] to i16
; CHECK-NEXT:    ret i16 [[TRUNC]]
;
  %zext = zext i16 %x to i32
  %and = and i32 %zext, 32767
  %ashr = ashr exact i32 %and, 15
  %trunc = trunc i32 %ashr to i16
  ret i16 %trunc
}

define i16 @shl_nuw(i8 %x, i8 %sh1) {
; CHECK-LABEL: @shl_nuw(
; CHECK-NEXT:    [[Z:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[S:%.*]] = shl nuw i32 [[Z]], 8
; CHECK-NEXT:    [[T:%.*]] = trunc i32 [[S]] to i16
; CHECK-NEXT:    ret i16 [[T]]
;
  %z = zext i8 %x to i32
  %s = shl nuw i32 %z, 8
  %t = trunc i32 %s to i16
  ret i16 %t
}

define i16 @shl_nsw(i8 %x, i8 %sh1) {
; CHECK-LABEL: @shl_nsw(
; CHECK-NEXT:    [[Z:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[S:%.*]] = shl nsw i32 [[Z]], 8
; CHECK-NEXT:    [[T:%.*]] = trunc i32 [[S]] to i16
; CHECK-NEXT:    ret i16 [[T]]
;
  %z = zext i8 %x to i32
  %s = shl nsw i32 %z, 8
  %t = trunc i32 %s to i16
  ret i16 %t
}
